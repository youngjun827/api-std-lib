name: Deploy to production

on:
  push:
    branches: [main]

env:
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG}}

jobs:
  deploy:
    name: Build image
    runs-on: "self-hosted"

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.21.3'
      id: install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Load secrets from AWS secret manager and save to .env
      run: aws secretsmanager get-secret-value --secret-id api_std_lib --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: public.ecr.aws/m1h7d8c2 
        ECR_REPOSITORY: api-std-lib-public
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
    
    - name: Debug Kubectl Configuration
      run: |
       cat $HOME/.kube/config

    - name: Deploy App(Auth)
      run: kubectl apply -f k9s/aws-auth.yaml
    
    - name: Deploy App(Deployment)
      run: kubectl apply -f k9s/deployment.yaml

    - name: Deploy App(Service)
      run: kubectl apply -f k9s/service.yaml
    
    - name: Deploy App(Issuer)
      run: kubectl apply -f k9s/issuer.yaml

    - name: Deploy App(Ingress)
      run: kubectl apply -f k9s/ingress.yaml

    - name: Deploy App(Restart)
      run: kubectl rollout restart deploy api-std-lib-api-deployment